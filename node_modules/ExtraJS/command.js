#!/usr/bin/env node
const program = require('commander');
const chalk = require('chalk');
const fs = require('fs');

// program.on('--help', function(){
//   console.log('')
//   console.log('Commands:');
//   console.log('  $ help help');
//   console.log('  $ make:model');
// });

program
	.version('1.0.0-beta')
	.arguments('<cmd> [options]')
	.action(function (cmd, options) {
		cmdValue = cmd;
		optionsValue = (typeof options === 'undefined') ? [] : options.split(' ');
	});
	// .command('make:model <name>')
	// .description('Make a new Model')
	// .action(function(name) {
	// 	if (!fs.existsSync('./Models/')){
	// 	    fs.mkdirSync('./Models/');
	// 	}
	// 	let file = fs.readFileSync(__dirname + '/stubs/Model.stub');
	// 	let newFile = file.toString().replace(/\{ModelName\}/g, name);
	// 	fs.writeFileSync('./Models/' + name + '.js', Buffer.from(newFile, 'utf8'));
	// 	console.log('Created ' + name + ' model');
	// });

program.parse(process.argv);

if (typeof cmdValue === 'undefined') {
	console.log(chalk.yellow('Available commands:'));
	console.log(chalk.green('    migrate'));
	console.log(chalk.green('    env'));
	console.log(chalk.yellow('  make'));
	console.log(chalk.green('    make:model'));
	console.log(chalk.green('    make:migration'));
	console.log(chalk.green('    make:listener'));
	process.exit(1);
}
if (optionsValue.length === 0) {
	if(cmdValue === 'make') {
		console.log(chalk.yellow('  make'));
		console.log(chalk.green('    make:model'));
		console.log(chalk.green('    make:migration'));
		console.log(chalk.green('    make:listener'));
	}
	process.exit(1);
}

let name = null;
let file = null;
let newFile = null;

switch(cmdValue) {
	case 'make:model':
		if (!fs.existsSync('./Models/')){
		    fs.mkdirSync('./Models/');
		}
		name = optionsValue[0];
		if(RegExp('[^A-Za-z0-9]+').test(name)) {
			console.log(chalk.red('Model name can only contain letters or numbers'));
			process.exit(1);
		}
		file = fs.readFileSync(__dirname + '/stubs/Model.stub');
		newFile = file.toString().replace(/\{ModelName\}/g, name);
		fs.writeFileSync('./Models/' + name + '.js', Buffer.from(newFile, 'utf8'));
		console.log(chalk.green('Created ' + name + ' model'));
		break;
	case 'make:listener':
		if (!fs.existsSync('./Models/')){
		    fs.mkdirSync('./Models/');
		}
		name = optionsValue[0];
		if(RegExp('[^A-Za-z0-9]+').test(name)) {
			console.log(chalk.red('Listener name can only contain letters or numbers'));
			process.exit(1);
		}
		file = fs.readFileSync(__dirname + '/stubs/Listener.stub');
		newFile = file.toString().replace(/\{ModelName\}/g, name);
		fs.writeFileSync('./Models/' + name + '.js', Buffer.from(newFile, 'utf8'));
		console.log(chalk.green('Created ' + name + ' listener'));
		break;
	case 'make:migration':
		if (!fs.existsSync('./migrations/')){
		    fs.mkdirSync('./migrations/');
		}
		break;
}

/*program
	.command('make:migration')
	.arguments('<name>')
	.action((name) => {
		console.log(name);
	})
	.parse(process.argv);*/